name: Security Scan

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-server, web-dashboard]

    steps:
      - uses: actions/checkout@v3

      # Container Scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './packages/${{ matrix.service }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'Trivy ${{ matrix.service }}'

      # Dependencies Scanning
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        if: matrix.service == 'web-dashboard'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high ./packages/web-dashboard

      - name: Run Safety check for Python dependencies
        if: matrix.service == 'api-server'
        run: |
          cd packages/api-server
          pip install safety
          safety check -r requirements.txt --full-report

      # Secret Scanning
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./packages/${{ matrix.service }}
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      # SAST Scanning
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.service == 'api-server' && 'python' || 'javascript' }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      # License Compliance
      - name: Check Licenses
        uses: actions/setup-node@v3
        if: matrix.service == 'web-dashboard'
        with:
          node-version: '18'
      - run: |
          cd packages/web-dashboard
          npm install license-checker
          npx license-checker --production --onlyAllow "MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause"

  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - uses: actions/checkout@v3

      # Dockerfile Linting
      - name: Lint Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./packages/api-server/Dockerfile

      - name: Lint Web Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./packages/web-dashboard/Dockerfile

      # Docker Compose Security Check
      - name: Check Docker Compose
        run: |
          docker-compose config -q
          docker-compose -f docker-compose.yml config | grep -i "password\|secret\|key" || true

  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - uses: actions/checkout@v3

      # GDPR Compliance Check
      - name: Check for PII Data
        run: |
          find . -type f -exec grep -l -i "password\|email\|phone\|address\|credit\|ssn" {} \;

      # Security Headers Check
      - name: Check Security Headers
        run: |
          curl -s -D- https://securityheaders.com/?q=${{ secrets.PRODUCTION_URL }} || true

      # Generate Security Report
      - name: Generate Security Report
        if: always()
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "## Scan Date: $(date -u)" >> security-report.md
          echo "## Repository: ${{ github.repository }}" >> security-report.md

      - name: Upload Security Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [security-scan, container-security, compliance-check]
    if: always()

    steps:
      - name: Notify on Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
